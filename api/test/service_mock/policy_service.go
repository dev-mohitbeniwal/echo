// Code generated by MockGen. DO NOT EDIT.
// Source: service/policy_service.go
//
// Generated by this command:
//
//	mockgen -source=service/policy_service.go -destination=test/service_mock/policy_service.go -package=mock_service
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	model "github.com/dev-mohitbeniwal/echo/api/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIPolicyService is a mock of IPolicyService interface.
type MockIPolicyService struct {
	ctrl     *gomock.Controller
	recorder *MockIPolicyServiceMockRecorder
}

// MockIPolicyServiceMockRecorder is the mock recorder for MockIPolicyService.
type MockIPolicyServiceMockRecorder struct {
	mock *MockIPolicyService
}

// NewMockIPolicyService creates a new mock instance.
func NewMockIPolicyService(ctrl *gomock.Controller) *MockIPolicyService {
	mock := &MockIPolicyService{ctrl: ctrl}
	mock.recorder = &MockIPolicyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPolicyService) EXPECT() *MockIPolicyServiceMockRecorder {
	return m.recorder
}

// AnalyzePolicyUsage mocks base method.
func (m *MockIPolicyService) AnalyzePolicyUsage(ctx context.Context, policyID string) (*model.PolicyUsageAnalysis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzePolicyUsage", ctx, policyID)
	ret0, _ := ret[0].(*model.PolicyUsageAnalysis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnalyzePolicyUsage indicates an expected call of AnalyzePolicyUsage.
func (mr *MockIPolicyServiceMockRecorder) AnalyzePolicyUsage(ctx, policyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzePolicyUsage", reflect.TypeOf((*MockIPolicyService)(nil).AnalyzePolicyUsage), ctx, policyID)
}

// CreatePolicy mocks base method.
func (m *MockIPolicyService) CreatePolicy(ctx context.Context, policy model.Policy, userID string) (*model.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", ctx, policy, userID)
	ret0, _ := ret[0].(*model.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockIPolicyServiceMockRecorder) CreatePolicy(ctx, policy, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockIPolicyService)(nil).CreatePolicy), ctx, policy, userID)
}

// DeletePolicy mocks base method.
func (m *MockIPolicyService) DeletePolicy(ctx context.Context, policyID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", ctx, policyID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockIPolicyServiceMockRecorder) DeletePolicy(ctx, policyID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockIPolicyService)(nil).DeletePolicy), ctx, policyID, userID)
}

// GetPolicy mocks base method.
func (m *MockIPolicyService) GetPolicy(ctx context.Context, policyID string) (*model.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", ctx, policyID)
	ret0, _ := ret[0].(*model.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockIPolicyServiceMockRecorder) GetPolicy(ctx, policyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockIPolicyService)(nil).GetPolicy), ctx, policyID)
}

// ListPolicies mocks base method.
func (m *MockIPolicyService) ListPolicies(ctx context.Context, limit, offset int) ([]*model.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicies", ctx, limit, offset)
	ret0, _ := ret[0].([]*model.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicies indicates an expected call of ListPolicies.
func (mr *MockIPolicyServiceMockRecorder) ListPolicies(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicies", reflect.TypeOf((*MockIPolicyService)(nil).ListPolicies), ctx, limit, offset)
}

// SearchPolicies mocks base method.
func (m *MockIPolicyService) SearchPolicies(ctx context.Context, criteria model.PolicySearchCriteria) ([]*model.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPolicies", ctx, criteria)
	ret0, _ := ret[0].([]*model.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPolicies indicates an expected call of SearchPolicies.
func (mr *MockIPolicyServiceMockRecorder) SearchPolicies(ctx, criteria any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPolicies", reflect.TypeOf((*MockIPolicyService)(nil).SearchPolicies), ctx, criteria)
}

// UpdatePolicy mocks base method.
func (m *MockIPolicyService) UpdatePolicy(ctx context.Context, policy model.Policy, userID string) (*model.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", ctx, policy, userID)
	ret0, _ := ret[0].(*model.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockIPolicyServiceMockRecorder) UpdatePolicy(ctx, policy, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockIPolicyService)(nil).UpdatePolicy), ctx, policy, userID)
}
